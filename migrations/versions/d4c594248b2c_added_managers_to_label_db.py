"""Added Managers to Label DB

Revision ID: d4c594248b2c
Revises: f465556116c6
Create Date: 2025-04-13 12:35:37.102002

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'd4c594248b2c'
down_revision: Union[str, None] = 'f465556116c6'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_decision_history_id', table_name='decision_history')
    op.drop_table('decision_history')
    op.drop_index('ix_releases_id', table_name='releases')
    op.drop_table('releases')
    op.drop_index('ix_artists_id', table_name='artists')
    op.drop_table('artists')
    op.drop_index('ix_staffs_id', table_name='staffs')
    op.drop_table('staffs')
    op.drop_index('ix_record_labels_id', table_name='record_labels')
    op.drop_table('record_labels')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('record_labels',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('record_labels_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('budget', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('level', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='record_labels_pkey'),
    sa.UniqueConstraint('name', name='record_labels_name_key'),
    sa.UniqueConstraint('user', name='record_labels_user_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_record_labels_id', 'record_labels', ['id'], unique=False)
    op.create_table('staffs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('salary', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('label_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['label_id'], ['record_labels.id'], name='staffs_label_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='staffs_pkey'),
    sa.UniqueConstraint('name', name='staffs_name_key')
    )
    op.create_index('ix_staffs_id', 'staffs', ['id'], unique=False)
    op.create_table('artists',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('artists_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('genre', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('popularity', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('signed_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('label_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('personality', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['label_id'], ['record_labels.id'], name='artists_label_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='artists_pkey'),
    sa.UniqueConstraint('name', name='artists_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_artists_id', 'artists', ['id'], unique=False)
    op.create_table('releases',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('artist_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('release_type', sa.VARCHAR(length=7), autoincrement=False, nullable=False),
    sa.Column('featured_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('genre', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('sales', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['artist_id'], ['artists.id'], name='releases_artist_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='releases_pkey')
    )
    op.create_index('ix_releases_id', 'releases', ['id'], unique=False)
    op.create_table('decision_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('artist_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('personality', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('decision', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['artist_id'], ['artists.id'], name='decision_history_artist_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='decision_history_pkey')
    )
    op.create_index('ix_decision_history_id', 'decision_history', ['id'], unique=False)
    # ### end Alembic commands ###
